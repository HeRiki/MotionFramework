// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HotfixMessage.proto

#pragma warning disable 1591, 0612, 3021

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;

namespace Hotfix
{
	public partial class C2R_Login : pb::IMessage
	{
		private int rpcId_;
		public int RpcId
		{
			get { return rpcId_; }
			set
			{
				rpcId_ = value;
			}
		}

		private string account_ = "";
		/// <summary>
		/// 帐号
		/// </summary>
		public string Account
		{
			get { return account_; }
			set
			{
				account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
			}
		}

		private string password_ = "";
		/// <summary>
		/// 密码
		/// </summary>
		public string Password
		{
			get { return password_; }
			set
			{
				password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
			}
		}

		public void WriteTo(pb::CodedOutputStream output)
		{
			if (Account.Length != 0)
			{
				output.WriteRawTag(10);
				output.WriteString(Account);
			}
			if (Password.Length != 0)
			{
				output.WriteRawTag(18);
				output.WriteString(Password);
			}
			if (RpcId != 0)
			{
				output.WriteRawTag(208, 5);
				output.WriteInt32(RpcId);
			}
		}

		public int CalculateSize()
		{
			int size = 0;
			if (RpcId != 0)
			{
				size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
			}
			if (Account.Length != 0)
			{
				size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
			}
			if (Password.Length != 0)
			{
				size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
			}
			return size;
		}

		public void MergeFrom(pb::CodedInputStream input)
		{
			account_ = "";
			password_ = "";
			rpcId_ = 0;
			uint tag;
			while ((tag = input.ReadTag()) != 0)
			{
				switch (tag)
				{
					default:
						input.SkipLastField();
						break;
					case 10:
						{
							Account = input.ReadString();
							break;
						}
					case 18:
						{
							Password = input.ReadString();
							break;
						}
					case 720:
						{
							RpcId = input.ReadInt32();
							break;
						}
				}
			}
		}

	}

	public partial class R2C_Login : pb::IMessage
	{
		private int rpcId_;
		public int RpcId
		{
			get { return rpcId_; }
			set
			{
				rpcId_ = value;
			}
		}

		private int errorID_;
		public int ErrorID
		{
			get { return errorID_; }
			set
			{
				errorID_ = value;
			}
		}

		private string errorInfo_ = "";
		public string ErrorInfo
		{
			get { return errorInfo_; }
			set
			{
				errorInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
			}
		}

		private string address_ = "";
		public string Address
		{
			get { return address_; }
			set
			{
				address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
			}
		}

		private long key_;
		public long Key
		{
			get { return key_; }
			set
			{
				key_ = value;
			}
		}

		public void WriteTo(pb::CodedOutputStream output)
		{
			if (Address.Length != 0)
			{
				output.WriteRawTag(10);
				output.WriteString(Address);
			}
			if (Key != 0L)
			{
				output.WriteRawTag(16);
				output.WriteInt64(Key);
			}
			if (RpcId != 0)
			{
				output.WriteRawTag(208, 5);
				output.WriteInt32(RpcId);
			}
			if (ErrorID != 0)
			{
				output.WriteRawTag(216, 5);
				output.WriteInt32(ErrorID);
			}
			if (ErrorInfo.Length != 0)
			{
				output.WriteRawTag(226, 5);
				output.WriteString(ErrorInfo);
			}
		}

		public int CalculateSize()
		{
			int size = 0;
			if (RpcId != 0)
			{
				size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
			}
			if (ErrorID != 0)
			{
				size += 2 + pb::CodedOutputStream.ComputeInt32Size(ErrorID);
			}
			if (ErrorInfo.Length != 0)
			{
				size += 2 + pb::CodedOutputStream.ComputeStringSize(ErrorInfo);
			}
			if (Address.Length != 0)
			{
				size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
			}
			if (Key != 0L)
			{
				size += 1 + pb::CodedOutputStream.ComputeInt64Size(Key);
			}
			return size;
		}

		public void MergeFrom(pb::CodedInputStream input)
		{
			address_ = "";
			key_ = 0;
			rpcId_ = 0;
			errorID_ = 0;
			errorInfo_ = "";
			uint tag;
			while ((tag = input.ReadTag()) != 0)
			{
				switch (tag)
				{
					default:
						input.SkipLastField();
						break;
					case 10:
						{
							Address = input.ReadString();
							break;
						}
					case 16:
						{
							Key = input.ReadInt64();
							break;
						}
					case 720:
						{
							RpcId = input.ReadInt32();
							break;
						}
					case 728:
						{
							ErrorID = input.ReadInt32();
							break;
						}
					case 738:
						{
							ErrorInfo = input.ReadString();
							break;
						}
				}
			}
		}
	}
}